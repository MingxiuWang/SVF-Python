

from typing import List, Iterator, Tuple, Any
from typing import overload, Optional
from typing import TYPE_CHECKING

BIN_DIR: str
CURRENT_DIR: str
SVF_DIR: str
LLVM_DIR: str
EXTAPI_BC_PATH: str
Z3_DIR: str

def run_tool(tool_name: str, args: List[str]) -> None: ...

SVFFunction = Any
SVFValue = Any
SVFLLVMValue = Any
SVFLoop = Any
SVFLoopInfo = Any
BranchInst = Any
MemObj = Any
OffsetVarAndGepTypePair = Any
SelectStmt = Any

class ICFGNode:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def to_string(self) -> str: ...
    """Get the string representation of the ICFG node"""

    def get_id(self) -> int: ...
    """Get the id of the ICFG node"""

    def get_fun(self) -> SVFFunction: ...
    """Get the function that the ICFG node belongs to"""

    def get_bb(self) -> "SVFBasicBlock": ...
    """Get the basic block that the ICFG node belongs to"""

    def get_svf_stmts(self) -> List["SVFStmt"]: ...
    """Get the SVF statements associated with the ICFG node"""

    def as_fun_entry(self) -> "FunEntryICFGNode": ...
    """Downcast to FunEntryICFGNode"""

    def as_fun_exit(self) -> "FunExitICFGNode": ...
    """Downcast to FunExitICFGNode"""

    def as_call(self) -> "CallICFGNode": ...
    """Downcast to CallICFGNode"""

    def as_ret(self) -> "RetICFGNode": ...
    """Downcast to RetICFGNode"""

    def is_fun_entry(self) -> bool: ...
    """Check if the ICFG node is a function entry node"""

    def is_fun_exit(self) -> bool: ...
    """Check if the ICFG node is a function exit node"""

    def is_call(self) -> bool: ...
    """Check if the ICFG node is a function call node"""

    def is_ret(self) -> bool: ...
    """Check if the ICFG node is a function return node"""

    def get_out_edges(self) -> List["ICFGEdge"]: ...
    """Get the out edges of the ICFG node"""

    def get_in_edges(self) -> List["ICFGEdge"]: ...
    """Get the in edges of the ICFG node"""

class IntraICFGNode(ICFGNode):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def is_ret_inst(self) -> bool: ...
    """Check if this is a return instruction"""

class InterICFGNode(ICFGNode):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

class GlobalICFGNode(ICFGNode):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

class CallGraphNode:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def get_function(self) -> SVFFunction: ...
    """Get the function of the call graph node"""
    
    def get_id(self) -> int: ...
    """Get the ID of the call graph node"""

    def get_name(self) -> str: ...
    """Get the name of the function"""
    
    def get_in_edges(self) -> List[CallGraphEdge]: ...
    """Get incoming edges of this node"""
    
    def get_out_edges(self) -> List[CallGraphEdge]: ...
    """Get outgoing edges of this node"""
    
    def is_reachable_from_prog_entry(self) -> bool: ...
    """Check if this function is reachable from program entry"""
    
    def to_string(self) -> str: ...
    """Get string representation of this node"""

    

class CallGraphEdge:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def get_src(self) -> CallGraphNode: ...
    """Get the source node of the call graph edge"""
    
    def get_dst(self) -> CallGraphNode: ...
    """Get the destination node of the call graph edge"""
    
    def get_call_site(self) -> CallICFGNode: ...
    """Get the call site of the call graph edge"""

    def get_call_site_id(self) -> int: ...
    """Get the call site ID"""
    
    def get_src_id(self) -> int: ...
    """Get source node ID"""
    
    def get_dst_id(self) -> int: ...
    """Get destination node ID"""

    def get_direct_calls(self) -> List[CallICFGNode]: ...
    """Get direct call ICFG nodes"""
    
    def get_indirect_calls(self) -> List[CallICFGNode]: ...
    """Get indirect call ICFG nodes"""
    
    def is_direct_call_edge(self) -> bool: ...
    """Check if this is a direct call edge"""
    
    def is_indirect_call_edge(self) -> bool: ...
    """Check if this is an indirect call edge"""
    
    def to_string(self) -> str: ...
    """Get string representation"""


class CallGraph:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def get_gnode(self, id: int) -> CallGraphNode: ...
    """Get the call graph node by ID"""
    
    def dump(self) -> None: ...
    """Dump the call graph to console"""
    
    def view(self) -> None: ...
    """View the call graph (opens visualization)"""
    
    def get_call_graph_node(self, fun: "SVFFunction") -> CallGraphNode: ...
    """Get the call graph node for the given function"""
    
    def get_call_graph_node_by_id(self, id: int) -> CallGraphNode: ...
    """Get the call graph node by ID"""
    
    def get_call_graph_node_by_name(self, name: str) -> CallGraphNode: ...
    """Get the call graph node by function name"""
    
    def get_nodes(self) -> List[CallGraphNode]: ...
    """Get all nodes in this call graph"""
    
    def is_reachable_between_functions(self, src: "SVFFunction", dst: "SVFFunction") -> bool: ...
    """Check if there's a path between two functions"""

class FunEntryICFGNode(ICFGNode):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def get_formal_parms(self) -> List["SVFVar"]: ...
    """Get the formal parameters of the function"""

    def add_formal_parm(self, parm: "SVFVar") -> None: ...
    """Add a formal parameter to the function"""

class FunExitICFGNode(ICFGNode):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def get_formal_ret(self) -> "SVFVar": ...
    """Get the formal return value of the function"""

    def add_formal_ret(self, ret: "SVFVar") -> None: ...
    """Add a formal return value to the function"""

class CallICFGNode(ICFGNode):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_caller(self) -> "FunEntryICFGNode": ...
    """Get the caller function"""

    def get_called_function(self) -> SVFFunction: ...
    """Get the called function"""

    def get_actual_parms(self) -> List["SVFVar"]: ...
    """Get the actual parameters of the call"""

    def add_actual_parm(self, parm: "SVFVar") -> None: ...
    """Add an actual parameter to the call"""

    def is_vararg(self) -> bool: ...
    """Check if the call is a vararg call"""

    def is_virtual_call(self) -> bool: ...
    """Check if the call is a virtual call"""

class RetICFGNode(ICFGNode):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_actual_ret(self) -> "SVFVar": ...
    """Get the actual return value"""

    def add_actual_ret(self, ret: "SVFVar") -> None: ...
    """Add an actual return value"""

    def get_call_node(self) -> "CallICFGNode": ...
    """Get the call node"""

class ICFGEdge:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def to_string(self) -> str: ...
    """Get the string representation of the ICFG edge"""

    def is_cfg_edge(self) -> bool: ...
    """Check if the edge is a CFG edge"""

    def is_call_cfg_edge(self) -> bool: ...
    """Check if the edge is a call CFG edge"""

    def is_ret_cfg_edge(self) -> bool: ...
    """Check if the edge is a return CFG edge"""

    def is_intra_cfg_edge(self) -> bool: ...
    """Check if the edge is an intra CFG edge"""

    def get_src(self) -> ICFGNode: ...
    """Get the source node of the edge"""

    def get_dst(self) -> ICFGNode: ...
    """Get the destination node of the edge"""

    def as_intra_cfg_edge(self) -> "IntraCFGEdge": ...
    """Downcast to IntraCFGEdge"""

    def as_call_cfg_edge(self) -> "CallCFGEdge": ...
    """Downcast to CallCFGEdge"""

    def as_ret_cfg_edge(self) -> "RetCFGEdge": ...
    """Downcast to RetCFGEdge"""



class IntraCFGEdge(ICFGEdge):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_condition(self) -> "SVFStmt": ...
    """Get the condition of the edge"""

    def get_successor_cond_value(self) -> SVFValue: ...
    """Get the successor condition value"""

class CallCFGEdge(ICFGEdge):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_call_site(self) -> "CallICFGNode": ...
    """Get the call site"""

    def get_call_pes(self) -> List["CallPE"]: ...
    """Get the call PEs"""

class RetCFGEdge(ICFGEdge):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_call_site(self) -> "CallICFGNode": ...
    """Get the call site"""

    def get_ret_pe(self) -> "RetPE": ...
    """Get the return PE"""


class SVFStmt:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def to_string(self) -> str: ...
    """Get the string representation of the SVF statement"""

    def get_edge_id(self) -> int: ...
    """Get the ID of the SVF statement"""

    def get_icfg_node(self) -> ICFGNode: ...
    """Get the ICFG node that the SVF statement belongs to"""

    def get_value(self) -> SVFValue: ...
    """Get the value of the SVF statement"""

    def get_bb(self) -> "SVFBasicBlock": ...
    """Get the basic block that the SVF statement belongs to"""

    def is_addr_stmt(self) -> bool: ...
    """Check if the SVF statement is an address statement"""

    def is_copy_stmt(self) -> bool: ...
    """Check if the SVF statement is a copy statement"""

    def is_store_stmt(self) -> bool: ...
    """Check if the SVF statement is a store statement"""

    def is_load_stmt(self) -> bool: ...
    """Check if the SVF statement is a load statement"""

    def is_call_pe(self) -> bool: ...
    """Check if the SVF statement is a call PE"""

    def is_ret_pe(self) -> bool: ...
    """Check if the SVF statement is a return PE"""

    def is_gep_stmt(self) -> bool: ...
    """Check if the SVF statement is a GEP statement"""

    def is_phi_stmt(self) -> bool: ...
    """Check if the SVF statement is a phi statement"""

    def is_select_stmt(self) -> bool: ...
    """Check if the SVF statement is a select statement"""

    def is_cmp_stmt(self) -> bool: ...
    """Check if the SVF statement is a compare statement"""

    def is_binary_op_stmt(self) -> bool: ...
    """Check if the SVF statement is a binary operation statement"""

    def is_unary_op_stmt(self) -> bool: ...
    """Check if the SVF statement is a unary operation statement"""

    def is_branch_stmt(self) -> bool: ...
    """Check if the SVF statement is a branch statement"""

    def as_addr_stmt(self) -> "AddrStmt": ...
    """Downcast the SVF statement to an address statement"""

    def as_copy_stmt(self) -> "CopyStmt": ...
    """Downcast the SVF statement to a copy statement"""

    def as_store_stmt(self) -> "StoreStmt": ...
    """Downcast the SVF statement to a store statement"""

    def as_load_stmt(self) -> "LoadStmt": ...
    """Downcast the SVF statement to a load statement"""

    def as_call_pe(self) -> "CallPE": ...
    """Downcast the SVF statement to a call PE"""

    def as_ret_pe(self) -> "RetPE": ...
    """Downcast the SVF statement to a return PE"""


    def as_gep_stmt(self) -> "GepStmt":
        """Downcast the SVF statement to a GEP statement"""

    def as_phi_stmt(self) -> "PhiStmt": ...
    """Downcast the SVF statement to a phi statement"""

    def as_select_stmt(self) -> "SelectStmt": ...
    """Downcast the SVF statement to a select statement"""

    def as_cmp_stmt(self) -> "CmpStmt": ...
    """Downcast the SVF statement to a compare statement"""

    def as_binary_op_stmt(self) -> "BinaryOPStmt": ...
    """Downcast the SVF statement to a binary operation statement"""

    def as_unary_op_stmt(self) -> "UnaryOPStmt": ...
    """Downcast the SVF statement to a unary operation statement"""

    def as_branch_stmt(self) -> "BranchStmt": ...
    """Downcast the SVF statement to a branch statement"""

class AddrStmt(SVFStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_lhs_var(self) -> "SVFVar": ...
    """Get the LHS variable of the address statement"""

    def get_lhs_id(self) -> int: ...
    """Get the ID of the LHS variable of the address statement"""

    def get_rhs_var(self) -> "SVFVar": ...
    """Get the RHS variable of the address statement"""

    def get_rhs_id(self) -> int: ...
    """Get the ID of the RHS variable of the address statement"""

    def get_arr_size(self) -> SVFValue: ...
    """Get the array size of the address statement"""

class CopyStmt(SVFStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_lhs_var(self) -> "SVFVar": ...
    """Get the LHS variable of the copy statement"""

    def get_lhs_id(self) -> int: ...
    """Get the ID of the LHS variable of the copy statement"""

    def get_rhs_var(self) -> "SVFVar": ...
    """Get the RHS variable of the copy statement"""

    def get_rhs_id(self) -> int: ...
    """Get the ID of the RHS variable of the copy statement"""

class StoreStmt(SVFStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_lhs_var(self) -> "SVFVar": ...
    """Get the LHS variable of the store statement"""

    def get_lhs_id(self) -> int: ...
    """Get the ID of the LHS variable of the store statement"""

    def get_rhs_var(self) -> "SVFVar": ...
    """Get the RHS variable of the store statement"""

    def get_rhs_id(self) -> int: ...
    """Get the ID of the RHS variable of the store statement"""

class LoadStmt(SVFStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_lhs_var(self) -> "SVFVar": ...
    """Get the LHS variable of the load statement"""

    def get_lhs_id(self) -> int: ...
    """Get the ID of the LHS variable of the load statement"""

    def get_rhs_var(self) -> "SVFVar": ...
    """Get the RHS variable of the load statement"""

    def get_rhs_id(self) -> int: ...
    """Get the ID of the RHS variable of the load statement"""

class CallPE(SVFStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_callsite(self) -> "CallICFGNode": ...
    """Get the call site"""

    def get_lhs_var(self) -> "SVFVar": ...
    """Get the LHS variable of the call PE"""

    def get_lhs_id(self) -> int: ...
    """Get the ID of the LHS variable of the call PE"""

    def get_rhs_var(self) -> "SVFVar": ...
    """Get the RHS variable of the call PE"""

    def get_rhs_id(self) -> int: ...
    """Get the ID of the RHS variable of the call PE"""

    def get_fun_entry_icfg_node(self) -> "FunEntryICFGNode": ...
    """Get the function entry ICFG node"""

class RetPE(SVFStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_callsite(self) -> "CallICFGNode": ...
    """Get the call site"""

    def get_lhs_var(self) -> "SVFVar": ...
    """Get the LHS variable of the return PE"""

    def get_lhs_id(self) -> int: ...
    """Get the ID of the LHS variable of the return PE"""

    def get_rhs_var(self) -> "SVFVar": ...
    """Get the RHS variable of the return PE"""

    def get_rhs_id(self) -> int: ...
    """Get the ID of the RHS variable of the return PE"""

    def get_fun_exit_icfg_node(self) -> "FunExitICFGNode": ...
    """Get the function exit ICFG node"""

class GepStmt(SVFStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_lhs_var(self) -> "SVFVar": ...
    """Get the LHS variable of the GEP statement"""

    def get_lhs_id(self) -> int: ...
    """Get the ID of the LHS variable of the GEP statement"""

    def get_rhs_var(self) -> "SVFVar": ...
    """Get the RHS variable of the GEP statement"""

    def get_rhs_id(self) -> int: ...
    """Get the ID of the RHS variable of the GEP statement"""

    def is_constant_offset(self) -> bool: ...
    """Check if the GEP statement has a constant offset"""

    def get_constant_offset(self) -> int: ...
    """Get the constant offset"""

    def get_constant_byte_offset(self) -> int: ...
    """Get the constant byte offset"""

    def get_constant_struct_fld_idx(self) -> int: ...
    """Get the constant struct field index"""

    def get_offset_var_and_gep_type_pair_vec(self) -> List["OffsetVarAndGepTypePair"]: ...
    """Get the offset variable and GEP type pair vector"""

    def get_src_pointee_type(self) -> "SVFType": ...

class PhiStmt(SVFStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_res_var(self) -> "SVFVar": ...
    """Get the result variable"""

    def get_res_id(self) -> int: ...
    """Get the ID of the result variable"""

    def get_op_var(self, idx: int) -> "SVFVar": ...
    """Get the operand variable"""

    def get_op_icfg_node(self, idx: int) -> ICFGNode: ...

    def get_op_var_num(self) -> int: ...

class CmpStmt(SVFStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_predicate(self) -> int: ...
    """Get the predicate"""

    def get_res(self) -> "SVFVar": ...
    """Get the result variable"""

    def get_res_id(self) -> int: ...
    """Get the ID of the result variable"""

    def get_op_var(self, ID: int) -> "SVFVar": ...
    """Get the operand variable"""

    def get_op_var_num(self) -> int: ...
    """Get the number of operands of the compare statement"""
    

class BinaryOPStmt(SVFStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_op(self) -> int: ...
    """Get the opcode"""

    def get_res(self) -> "SVFVar": ...
    """Get the result variable"""

    def get_res_id(self) -> int: ...
    """Get the ID of the result variable"""

    def get_op_var(self, ID: int) -> "SVFVar": ...
    """Get the operand variable"""


class UnaryOPStmt(SVFStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_op(self) -> int: ...
    """Get the opcode"""

    def get_res(self) -> "SVFVar": ...
    """Get the result variable"""

    def get_res_id(self) -> int: ...
    """Get the ID of the result variable"""

    def get_op_var(self) -> "SVFVar": ...
    """Get the operand variable"""


class BranchStmt(SVFStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def get_successors(self) -> List[ICFGNode]: ...
    """Get the successors of the branch statement"""

    def get_num_successors(self) -> int: ...
    """Get the number of successors"""

    def is_conditional(self) -> bool: ...
    """Check if the branch statement is conditional"""

    def is_unconditional(self) -> bool: ...
    """Check if the branch statement is unconditional"""

    def get_condition(self) -> "SVFVar": ...
    """Get the condition variable"""

    def get_branch_inst(self) -> "BranchInst": ...
    """Get the branch instruction"""



class ICFG:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_nodes(self) -> List[ICFGNode]: ...
    """Get the nodes of the ICFG"""

    def get_gnode(self, id: int) -> ICFGNode: ...
    """Get the ICFG node with the given ID"""

    def get_global_icfg_node(self) -> ICFGNode: ...
    """Get the global ICFG node"""

    def dump(self, file: str) -> None: ...
    """Dump the ICFG to a file"""

class SVFVar:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_name(self) -> str: ...
    """Get the name of the SVF variable"""

    def get_id(self) -> int: ...
    """Get the ID of the SVF variable"""

    def is_pointer(self) -> bool: ...
    """Check if the SVF variable is a pointer"""

    def is_const_data_or_agg_data_but_not_null_ptr(self) -> bool: ...
    """Check if the SVF variable is const data or agg data but not a null pointer"""

    def is_isolated_node(self) -> bool: ...
    """Check if the SVF variable is an isolated node"""

    def get_value_name(self) -> str: ...
    """Get the value name of the SVF variable"""

    def get_function(self) -> SVFFunction: ...
    """Get the function that the SVF variable belongs to"""

    def ptr_in_uncalled_function(self) -> bool: ...
    """Check if the pointer is in an uncalled function"""

    def is_const_data_or_agg_data(self) -> bool: ...
    """Check if the SVF variable is const data or agg data"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF variable"""

    def is_val_var(self) -> bool: ...
    """Check if the SVF variable is a ValVar"""
    def is_obj_var(self) -> bool: ...
    """Check if the SVF variable is an ObjVar"""
    def is_gep_val_var(self) -> bool: ...
    """Check if the SVF variable is a GepValVar"""
    def is_gep_obj_var(self) -> bool: ...
    """Check if the SVF variable is a GepObjVar"""
    def is_fun_obj_var(self) -> bool: ...
    """Check if the SVF variable is a FunObjVar"""
    def is_fun_val_var(self) -> bool: ...
    """Check if the SVF variable is a FunValVar"""
    def is_arg_val_var(self) -> bool: ...
    """Check if the SVF variable is an ArgValVar"""
    def is_ret_val_var(self) -> bool: ...
    """Check if the SVF variable is a RetValPN"""
    def is_dummy_val_var(self) -> bool: ...
    """Check if the SVF variable is a DummyValVar"""
    def is_dummy_obj_var(self) -> bool: ...
    """Check if the SVF variable is a DummyObjVar"""
    def as_val_var(self) -> ValVar: ...
    """Downcast the SVF variable to a ValVar"""
    def as_obj_var(self) -> ObjVar: ...
    """Downcast the SVF variable to an ObjVar"""
    def as_gep_val_var(self) -> GepValVar: ...
    """Downcast the SVF variable to a GepValVar"""
    def as_gep_obj_var(self) -> GepObjVar: ...
    """Downcast the SVF variable to a GepObjVar"""
    def as_fun_obj_var(self) -> FunObjVar: ...
    """Downcast the SVF variable to a FunObjVar"""
    def as_fun_val_var(self) -> FunValVar: ...
    """Downcast the SVF variable to a FunValVar"""
    def as_arg_val_var(self) -> ArgValVar: ...
    """Downcast the SVF variable to an ArgValVar"""
    def as_ret_val_var(self) -> RetValPN: ...
    """Downcast the SVF variable to a RetValPN"""
    def as_dummy_val_var(self) -> DummyValVar: ...
    """Downcast the SVF variable to a DummyValVar"""
    def as_dummy_obj_var(self) -> DummyObjVar: ...
    """Downcast the SVF variable to a DummyObjVar"""

class ValVar(SVFVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_icfg_node(self) -> ICFGNode: ...
    """Get the ICFG node that the SVF variable belongs to"""

    def get_value_name(self) -> str: ...
    """Get the value name of the SVF variable"""

    def get_function(self) -> SVFFunction: ...
    """Get the function that the SVF variable belongs to"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF variable"""

    def is_fun_val_var(self) -> bool: ...
    """Check if the SVF variable is a FunValVar"""
    def as_fun_val_var(self) -> FunValVar: ...
    """Downcast the SVF variable to a FunValVar"""
    def is_arg_val_var(self) -> bool: ...
    """Check if the SVF variable is an ArgValVar"""
    def as_arg_val_var(self) -> ArgValVar: ...
    """Downcast the SVF variable to an ArgValVar"""
    def is_global_val_var(self) -> bool: ...
    """Check if the SVF variable is a GlobalValVar"""
    def as_global_val_var(self) -> GlobalValVar: ...
    """Downcast the SVF variable to a GlobalValVar"""
    def is_const_agg_val_var(self) -> bool: ...
    """Check if the SVF variable is a ConstAggValVar"""
    def as_const_agg_val_var(self) -> ConstAggValVar: ...
    """Downcast the SVF variable to a ConstAggValVar"""
    def is_const_data_val_var(self) -> bool: ...
    """Check if the SVF variable is a ConstDataValVar"""
    def as_const_data_val_var(self) -> ConstDataValVar: ...
    """Downcast the SVF variable to a ConstDataValVar"""
    def is_const_fp_val_var(self) -> bool: ...
    """Check if the SVF variable is a ConstFPValVar"""
    def as_const_fp_val_var(self) -> ConstFPValVar: ...
    """Downcast the SVF variable to a ConstFPValVar"""
    def is_const_int_val_var(self) -> bool: ...
    """Check if the SVF variable is a ConstIntValVar"""
    def as_const_int_val_var(self) -> ConstIntValVar: ...
    """Downcast the SVF variable to a ConstIntValVar"""
    def is_const_null_ptr_val_var(self) -> bool: ...
    """Check if the SVF variable is a ConstNullPtrValVar"""
    def as_const_null_ptr_val_var(self) -> ConstNullPtrValVar: ...
    """Downcast the SVF variable to a ConstNullPtrValVar"""
    def is_black_hole_val_var(self) -> bool: ...
    """Check if the SVF variable is a BlackHoleValVar"""
    def as_black_hole_val_var(self) -> BlackHoleValVar: ...
    """Downcast the SVF variable to a BlackHoleValVar"""
    def is_gep_val_var(self) -> bool: ...
    """Check if the SVF variable is a GepValVar"""
    def as_gep_val_var(self) -> GepValVar: ...
    """Downcast the SVF variable to a GepValVar"""
    def is_ret_val_pn(self) -> bool: ...
    """Check if the SVF variable is a RetValPN"""
    def as_ret_val_pn(self) -> RetValPN: ...
    """Downcast the SVF variable to a RetValPN"""
    def is_var_arg_val_pn(self) -> bool: ...
    """Check if the SVF variable is a VarArgValPN"""
    def as_var_arg_val_pn(self) -> VarArgValPN: ...
    """Downcast the SVF variable to a VarArgValPN"""
    def is_dummy_val_var(self) -> bool: ...
    """Check if the SVF variable is a DummyValVar"""
    def as_dummy_val_var(self) -> DummyValVar: ...
    """Downcast the SVF variable to a DummyValVar"""

class ObjVar(SVFVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_value_name(self) -> str: ...
    """Get the value name of the SVF variable"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF variable"""

    def is_obj_var(node: SVFVar) -> bool: ...
    """Check if the SVF variable is an ObjVar"""

    def as_obj_var(node: SVFVar) -> ObjVar: ...
    """Downcast the SVF variable to an ObjVar"""

    def is_base_obj_var(node: ObjVar) -> bool: ...
    """Check if the SVF variable is a BaseObjVar"""

    def as_base_obj_var(node: ObjVar) -> BaseObjVar: ...
    """Downcast the SVF variable to a BaseObjVar"""

    def is_const_agg_obj_var(self) -> bool: ...
    """Check if this is a constant aggregate object variable"""
    
    def is_const_data_obj_var(self) -> bool: ...
    """Check if this is a constant data object variable"""
    
    def is_const_fp_obj_var(self) -> bool: ...
    """Check if this is a constant floating point object variable"""
    
    def is_const_int_obj_var(self) -> bool: ...
    """Check if this is a constant integer object variable"""
    
    def is_const_null_ptr_obj_var(self) -> bool: ...
    """Check if this is a constant null pointer object variable"""
    
    def is_global_obj_var(self) -> bool: ...
    """Check if this is a global object variable"""
    
    def is_heap_obj_var(self) -> bool: ...
    """Check if this is a heap object variable"""
    
    def is_stack_obj_var(self) -> bool: ...
    """Check if this is a stack object variable"""
    
    def as_const_agg_obj_var(self) -> "ConstAggObjVar": ...
    """Cast to ConstAggObjVar if possible"""
    
    def as_const_data_obj_var(self) -> "ConstDataObjVar": ...
    """Cast to ConstDataObjVar if possible"""
    
    def as_const_fp_obj_var(self) -> "ConstFPObjVar": ...
    """Cast to ConstFPObjVar if possible"""
    
    def as_const_int_obj_var(self) -> "ConstIntObjVar": ...
    """Cast to ConstIntObjVar if possible"""
    
    def as_const_null_ptr_obj_var(self) -> "ConstNullPtrObjVar": ...
    """Cast to ConstNullPtrObjVar if possible"""
    
    def as_global_obj_var(self) -> "GlobalObjVar": ...
    """Cast to GlobalObjVar if possible"""
    
    def as_heap_obj_var(self) -> "HeapObjVar": ...
    """Cast to HeapObjVar if possible"""
    
    def as_stack_obj_var(self) -> "StackObjVar": ...
    """Cast to StackObjVar if possible"""

class ArgValVar(ValVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_function(self) -> SVFFunction: ...
    """Get the function that the SVF variable belongs to"""

    def get_parent(self) -> "SVFVar": ...
    """Get the parent of the SVF variable"""

    def get_arg_no(self) -> int: ...
    """Get the argument number"""

    def is_pointer(self) -> bool: ...
    """Check if the SVF variable is a pointer"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF variable"""

    def is_arg_of_uncalled_function(self) -> bool: ...
    """Check if this is an argument of an uncalled function"""

class GepValVar(ValVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_constant_field_idx(self) -> int: ...
    """Get the constant field index"""

    def get_base_node(self) -> "SVFVar": ...
    """Get the base node"""

    def get_value_name(self) -> str: ...
    """Get the value name of the SVF variable"""

    def is_pointer(self) -> bool: ...
    """Check if the SVF variable is a pointer"""

    def get_type(self) -> SVFType: ...
    """Get the type of the SVF variable"""

    def get_function(self) -> SVFFunction: ...
    """Get the function that the SVF variable belongs to"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF variable"""

class BaseObjVar(ObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_type(self) -> SVFType: ...
    """Get the type of the SVF variable"""

    def get_byte_size_of_obj(self) -> int: ...
    """Get the byte size of the object"""

    def is_fun_obj_var(self) -> bool: ...
    """Check if the SVF variable is a FunObjVar"""
    def as_fun_obj_var(self) -> FunObjVar: ...
    """Downcast the SVF variable to a FunObjVar"""
    def is_global_obj_var(self) -> bool: ...
    """Check if the SVF variable is a GlobalObjVar"""
    def as_global_obj_var(self) -> GlobalObjVar: ...
    """Downcast the SVF variable to a GlobalObjVar"""
    def is_heap_obj_var(self) -> bool: ...
    """Check if the SVF variable is a HeapObjVar"""
    def as_heap_obj_var(self) -> HeapObjVar: ...
    """Downcast the SVF variable to a HeapObjVar"""
    def is_stack_obj_var(self) -> bool: ...
    """Check if the SVF variable is a StackObjVar"""
    def as_stack_obj_var(self) -> StackObjVar: ...
    """Downcast the SVF variable to a StackObjVar"""
    def is_const_agg_obj_var(self) -> bool: ...
    """Check if the SVF variable is a ConstAggObjVar"""
    def as_const_agg_obj_var(self) -> ConstAggObjVar: ...
    """Downcast the SVF variable to a ConstAggObjVar"""
    def is_const_data_obj_var(self) -> bool: ...
    """Check if the SVF variable is a ConstDataObjVar"""
    def as_const_data_obj_var(self) -> ConstDataObjVar: ...
    """Downcast the SVF variable to a ConstDataObjVar"""
    def is_dummy_obj_var(self) -> bool: ...
    """Check if the SVF variable is a DummyObjVar"""
    def as_dummy_obj_var(self) -> DummyObjVar: ...
    """Downcast the SVF variable to a DummyObjVar"""
    def get_base_mem_obj(self) -> "MemObj": ...
    """Get the base memory object"""

    def get_icfg_node(self) -> ICFGNode: ...
    """Get the ICFG node associated with this object variable"""
    
    def get_max_field_offset_limit(self) -> int: ...
    """Get the maximum field offset limit"""
    
    def get_num_of_elements(self) -> int: ...
    """Get the number of elements"""
    
    def set_num_of_elements(self, num: int) -> None: ...
    """Set the number of elements"""
    
    def is_array(self) -> bool: ...
    """Check if this is an array"""
    
    def is_black_hole_obj(self) -> bool: ...
    """Check if this is a black hole object"""
    
    def is_const_data_or_const_global(self) -> bool: ...
    """Check if this is constant data or constant global"""
    
    def is_constant_array(self) -> bool: ...
    """Check if this is a constant array"""
    
    def is_constant_byte_size(self) -> bool: ...
    """Check if this has constant byte size"""
    
    def is_constant_struct(self) -> bool: ...
    """Check if this is a constant struct"""
    
    def is_field_insensitive(self) -> bool: ...
    """Check if this is field insensitive"""
    
    def is_function(self) -> bool: ...
    """Check if this is a function"""
    
    def is_global_obj(self) -> bool: ...
    """Check if this is a global object"""
    
    def is_heap(self) -> bool: ...
    """Check if this is on the heap"""
    
    def is_stack(self) -> bool: ...
    """Check if this is on the stack"""
    
    def is_static_obj(self) -> bool: ...
    """Check if this is a static object"""
    
    def is_struct(self) -> bool: ...
    """Check if this is a struct"""
    
    def is_var_array(self) -> bool: ...
    """Check if this is a variable array"""
    
    def is_var_struct(self) -> bool: ...
    """Check if this is a variable struct"""
    
    def set_field_insensitive(self) -> None: ...
    """Set as field insensitive"""
    
    def set_field_sensitive(self) -> None: ...
    """Set as field sensitive"""

class GepObjVar(ObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_constant_field_idx(self) -> int: ...
    """Get the constant field index"""

    def get_base_node(self) -> "SVFVar": ...
    """Get the base node"""

    def get_type(self) -> SVFType: ...
    """Get the type of the SVF variable"""

    def get_value_name(self) -> str: ...
    """Get the value name of the SVF variable"""

    def is_pointer(self) -> bool: ...
    """Check if the SVF variable is a pointer"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF variable"""

class FunObjVar(BaseObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def is_declaration(self) -> bool: ...
    """Check if the function is a declaration"""

    def is_intrinsic(self) -> bool: ...
    """Check if the function is an intrinsic"""

    def has_address_taken(self) -> bool: ...
    """Check if the function has its address taken"""

    def is_vararg(self) -> bool: ...
    """Check if the function is vararg"""

    def is_uncalled_function(self) -> bool: ...
    """Check if the function is an uncalled function"""

    def has_return(self) -> bool: ...
    """Check if the function has a return"""

    def get_function_type(self) -> SVFType: ...
    """Get the function type"""

    def get_return_type(self) -> SVFType: ...
    """Get the return type"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF variable"""
    
    def dominates(self, bbKey: SVFBasicBlock, bbValue: SVFBasicBlock) -> bool: ...
    """Check if one basic block dominates another"""
    
    def post_dominates(self, bbKey: SVFBasicBlock, bbValue: SVFBasicBlock) -> bool: ...
    """Check if one basic block post-dominates another"""

class FunValVar(ValVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_function(self) -> SVFFunction: ...
    """Get the function that the SVF variable belongs to"""

    def is_pointer(self) -> bool: ...
    """Check if the SVF variable is a pointer"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF variable"""

class ConstDataValVar(ValVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    

class ConstFPValVar(ConstDataValVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_fp_value(self) -> float: ...
    """Get the floating point value"""

class ConstIntValVar(ConstDataValVar):
    def get_sext_value(self) -> int: ...
    """Get the sign extended value"""

    def get_zext_value(self) -> int: ...
    """Get the zero extended value"""

class ConstNullPtrValVar(ConstDataValVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    

class ConstDataObjVar(BaseObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def is_const_fp_obj_var(self) -> bool: ...
    """Check if the SVF variable is a ConstFPObjVar"""
    def as_const_fp_obj_var(self) -> ConstFPObjVar: ...
    """Downcast the SVF variable to a ConstFPObjVar"""
    def is_const_int_obj_var(self) -> bool: ...
    """Check if the SVF variable is a ConstIntObjVar"""
    def as_const_int_obj_var(self) -> ConstIntObjVar: ...
    """Downcast the SVF variable to a ConstIntObjVar"""
    def is_const_null_ptr_obj_var(self) -> bool: ...
    """Check if the SVF variable is a ConstNullPtrObjVar"""
    def as_const_null_ptr_obj_var(self) -> ConstNullPtrObjVar: ...
    """Downcast the SVF variable to a ConstNullPtrObjVar"""

class ConstFPObjVar(ConstDataObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_fp_value(self) -> float: ...
    """Get the floating point value"""



class ConstIntObjVar(ConstDataObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_sext_value(self) -> int: ...
    """Get the sign extended value"""

    def get_zext_value(self) -> int: ...
    """Get the zero extended value"""

class RetValPN(ValVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_function(self) -> SVFFunction: ...
    """Get the function that the SVF variable belongs to"""

class VarArgValPN(ValVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_function(self) -> SVFFunction: ...
    """Get the function that the SVF variable belongs to"""


class SVFType:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_kind(self) -> int: ...
    """Get the kind of the SVF type"""

    def get_byte_size(self) -> int: ...
    """Get the byte size of the SVF type"""

    def is_pointer_ty(self) -> bool: ...
    """Check if the SVF type is a pointer type"""

    def is_array_ty(self) -> bool: ...
    """Check if the SVF type is an array type"""

    def is_struct_ty(self) -> bool: ...
    """Check if the SVF type is a struct type"""

    def is_single_value_ty(self) -> bool: ...
    """Check if the SVF type is a single value type"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF type"""

    def as_pointer_type(self) -> SVFPointerType: ...
    """Downcast the SVF type to a SVFPointerType"""
    def as_integer_type(self) -> SVFIntegerType: ...
    """Downcast the SVF type to a SVFIntegerType"""
    def as_function_type(self) -> SVFFunctionType: ...
    """Downcast the SVF type to a SVFFunctionType"""
    def as_struct_type(self) -> SVFStructType: ...
    """Downcast the SVF type to a SVFStructType"""
    def as_array_type(self) -> SVFArrayType: ...
    """Downcast the SVF type to a SVFArrayType"""
    def as_other_type(self) -> SVFOtherType: ...
    """Downcast the SVF type to a SVFOtherType"""
    def is_pointer_type(self) -> bool: ...
    """Check if the SVF type is a pointer type"""
    def is_integer_type(self) -> bool: ...
    """Check if the SVF type is an integer type"""
    def is_function_type(self) -> bool: ...
    """Check if the SVF type is a function type"""
    def is_struct_type(self) -> bool: ...
    """Check if the SVF type is a struct type"""
    def is_array_type(self) -> bool: ...
    """Check if the SVF type is an array type"""
    def is_other_type(self) -> bool: ...
    """Check if the SVF type is an other type"""

class SVFPointerType(SVFType):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def print(self) -> None: ...
    """Print the SVF pointer type"""



class SVFIntegerType(SVFType):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def print(self) -> None: ...
    """Print the SVF integer type"""

    def set_sign_and_width(self, sign: bool, width: int) -> None: ...
    """Set the sign and width of the SVF integer type"""

    def is_signed(self) -> bool: ...
    """Check if the SVF integer type is signed"""

class SVFFunctionType(SVFType):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def print(self) -> None: ...
    """Print the SVF function type"""

    def get_return_type(self) -> SVFType: ...
    """Get the return type of the SVF function type"""

class SVFStructType(SVFType):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def print(self) -> None: ...
    """Print the SVF struct type"""

    def get_name(self) -> str: ...
    """Get the name of the SVF struct type"""

    def set_name(self, name: str) -> None: ...
    """Set the name of the SVF struct type"""

class SVFArrayType(SVFType):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def print(self) -> None: ...
    """Print the SVF array type"""

    def get_type_of_element(self) -> SVFType: ...
    """Get the type of the element"""

    def set_type_of_element(self, type: SVFType) -> None: ...
    """Set the type of the element"""

    def set_num_of_element(self, num: int) -> None: ...
    """Set the number of elements"""

class SVFOtherType(SVFType):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def print(self) -> None: ...
    """Print the SVF other type"""

    def get_repr(self) -> str: ...
    """Get the representation of the SVF other type"""

    def set_repr(self, repr: str) -> None: ...
    """Set the representation of the SVF other type"""


class SVFIR(SVFLLVMValue):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_icfg(self) -> ICFG: ...
    """Get the ICFG of the SVFIR"""

    def get_call_sites(self) -> List[CallICFGNode]: ...
    """Get the call sites of the SVFIR"""

    def get_pag_node_num(self) -> int: ...
    """Get the number of PAG nodes"""
    
    def get_call_graph(self) -> "CallGraph": ...
    """Get the call graph of the SVFIR"""

    def __iter__(self) -> Iterator[Tuple[int, SVFVar]]: ...
    
    def get_base_object(self, id: int) -> BaseObjVar: ...
    """Get the base object with the given ID"""
    
    def get_gnode(self, id: int) -> SVFVar: ...
    """Get the SVFVar with the given ID"""
    
    def get_gep_obj_var(self, id: int, offset: int) -> int: ...
    """Get the GEP object variable ID"""
    
    def get_num_of_flatten_elements(self, T: SVFType) -> int: ...
    """Get the number of flattened elements"""
    
    def get_flattened_elem_idx(self, T: SVFType, origId: int) -> int: ...
    """Get the flattened element index"""


# Add these definitions to pysvf.pyi

class SVFBasicBlock:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def get_id(self) -> int: ...
    """Get the ID of the basic block"""
    
    def get_name(self) -> str: ...
    """Get the name of the basic block"""
    
    def get_icfg_node_list(self) -> List[ICFGNode]: ...
    """Get the list of ICFG nodes in the basic block"""
    
    def front(self) -> ICFGNode: ...
    """Get the first ICFG node in the basic block"""
    
    def back(self) -> ICFGNode: ...
    """Get the last ICFG node in the basic block"""
    
    def __iter__(self) -> Iterator[ICFGNode]: ...
    """Iterate through ICFG nodes in the basic block"""
    
    def get_parent(self) -> SVFFunction: ...
    """Get the parent function of the basic block"""
    
    def get_function(self) -> SVFFunction: ...
    """Get the function that contains this basic block"""
    
    def get_successors(self) -> List["SVFBasicBlock"]: ...
    """Get the successor basic blocks"""
    
    def get_predecessors(self) -> List["SVFBasicBlock"]: ...
    """Get the predecessor basic blocks"""
    
    def get_num_successors(self) -> int: ...
    """Get the number of successor basic blocks"""
    
    def get_bb_successor_pos(self, bb: "SVFBasicBlock") -> int: ...
    """Get the position of a successor basic block"""
    
    def get_bb_predecessor_pos(self, bb: "SVFBasicBlock") -> int: ...
    """Get the position of a predecessor basic block"""
    
    def __repr__(self) -> str: ...
    """Get the string representation of the basic block"""
    
    def __str__(self) -> str: ...
    """Get the string representation of the basic block"""


# Classes inheriting from ValVar
class DummyValVar(ValVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    

class GlobalValVar(ValVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""


class ConstAggValVar(ValVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    

class BlackHoleValVar(ValVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    

# Classes inheriting from ObjVar/BaseObjVar
class DummyObjVar(BaseObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    

class GlobalObjVar(BaseObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    

class HeapObjVar(BaseObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    

class StackObjVar(BaseObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    

class ConstAggObjVar(BaseObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    

class ConstNullPtrObjVar(ConstDataObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    



# Updated function signatures
def get_pag(bitcodePath: str, buildSVFG: bool = False) -> SVFIR: ...
"""Analyze LLVM bitcode and return SVFIR. If buildSVFG is True, also builds sparse value flow graph."""

# New access functions
def get_icfg() -> ICFG: ...
"""Get the current interprocedural control flow graph"""

def get_callgraph() -> CallGraph: ...
"""Get the current call graph"""

def get_svfg() -> "SVFG": ...
"""Get the current sparse value flow graph if it was built"""

def get_module_name() -> str: ...
"""Get the name of the last analyzed module"""

def release_pag(pag: SVFIR) -> None: ...
"""Release the SVFIR"""

# Value-flow graph base classes
class VFGEdge:
    """Base class for Value-Flow Graph edges"""
    def to_string(self) -> str: ...
    def __str__(self) -> str: ...
    def is_direct_vfg_edge(self) -> bool: ...
    def is_indirect_vfg_edge(self) -> bool: ...
    def is_call_vfg_edge(self) -> bool: ...
    def is_ret_vfg_edge(self) -> bool: ...
    def is_call_direct_vfg_edge(self) -> bool: ...
    def is_ret_direct_vfg_edge(self) -> bool: ...
    def is_call_indirect_vfg_edge(self) -> bool: ...
    def is_ret_indirect_vfg_edge(self) -> bool: ...
    def is_intra_vfg_edge(self) -> bool: ...
    def is_thread_mhp_indirect_vfg_edge(self) -> bool: ...
    def get_src(self) -> "VFGNode": ...
    def get_dst(self) -> "VFGNode": ...
    def as_direct_svfg_edge(self) -> "DirectSVFGEdge": ...
    def as_indirect_svfg_edge(self) -> "IndirectSVFGEdge": ...

class DirectSVFGEdge(VFGEdge):
    """Direct SVF Graph Edge"""
    def to_string(self) -> str: ...
    def as_intra_dir_svfg_edge(self) -> "IntraDirSVFGEdge": ...
    def as_call_dir_svfg_edge(self) -> "CallDirSVFGEdge": ...
    def as_ret_dir_svfg_edge(self) -> "RetDirSVFGEdge": ...

class IntraDirSVFGEdge(DirectSVFGEdge):
    """Intraprocedural direct SVF edge"""
    def to_string(self) -> str: ...

class CallDirSVFGEdge(DirectSVFGEdge):
    """Call direct SVF edge"""
    def get_call_site_id(self) -> int: ...
    def to_string(self) -> str: ...

class RetDirSVFGEdge(DirectSVFGEdge):
    """Return direct SVF edge"""
    def get_call_site_id(self) -> int: ...
    def to_string(self) -> str: ...

class IndirectSVFGEdge(VFGEdge):
    """Indirect SVF Graph Edge"""
    def get_points_to(self) -> Any: ...  # Could be more specific with proper type
    def add_points_to(self, points: Any) -> None: ...
    def to_string(self) -> str: ...
    def as_intra_ind_svfg_edge(self) -> "IntraIndSVFGEdge": ...
    def as_call_ind_svfg_edge(self) -> "CallIndSVFGEdge": ...
    def as_ret_ind_svfg_edge(self) -> "RetIndSVFGEdge": ...
    def as_thread_mhp_ind_svfg_edge(self) -> "ThreadMHPIndSVFGEdge": ...

class IntraIndSVFGEdge(IndirectSVFGEdge):
    """Intraprocedural indirect SVF edge"""
    def to_string(self) -> str: ...

class CallIndSVFGEdge(IndirectSVFGEdge):
    """Call indirect SVF edge"""
    def get_call_site_id(self) -> int: ...
    def to_string(self) -> str: ...

class RetIndSVFGEdge(IndirectSVFGEdge):
    """Return indirect SVF edge"""
    def get_call_site_id(self) -> int: ...
    def to_string(self) -> str: ...

class ThreadMHPIndSVFGEdge(IndirectSVFGEdge):
    """Thread MHP indirect SVF edge"""
    def to_string(self) -> str: ...

# VFG Node classes
class VFGNode:
    """Base class for Value-Flow Graph nodes"""
    def to_string(self) -> str: ...
    def __str__(self) -> str: ...
    def get_id(self) -> int: ...
    def get_icfg_node(self) -> ICFGNode: ...
    def get_def_svf_vars(self) -> List[SVFVar]: ...
    def get_out_edges(self) -> List[VFGEdge]: ...
    def get_in_edges(self) -> List[VFGEdge]: ...
    def is_stmt_vfg_node(self) -> bool: ...
    def is_phi_vfg_node(self) -> bool: ...
    def is_argument_vfg_node(self) -> bool: ...
    def is_cmp_vfg_node(self) -> bool: ...
    def is_binary_op_vfg_node(self) -> bool: ...
    def is_unary_op_vfg_node(self) -> bool: ...
    def is_branch_vfg_node(self) -> bool: ...
    def as_stmt_vfg_node(self) -> "StmtVFGNode": ...
    def as_phi_vfg_node(self) -> "PHIVFGNode": ...
    def as_argument_vfg_node(self) -> "ArgumentVFGNode": ...
    def as_cmp_vfg_node(self) -> "CmpVFGNode": ...
    def as_binary_op_vfg_node(self) -> "BinaryOPVFGNode": ...
    def as_unary_op_vfg_node(self) -> "UnaryOPVFGNode": ...
    def as_branch_vfg_node(self) -> "BranchVFGNode": ...
    def get_value(self) -> SVFVar: ...

class StmtVFGNode(VFGNode):
    """Statement VFG node"""
    def get_value(self) -> SVFVar: ...
    def to_string(self) -> str: ...
    def is_load_vfg_node(self) -> bool: ...
    def is_store_vfg_node(self) -> bool: ... 
    def is_copy_vfg_node(self) -> bool: ...
    def is_gep_vfg_node(self) -> bool: ...
    def is_addr_vfg_node(self) -> bool: ...
    def as_load_vfg_node(self) -> "LoadVFGNode": ...
    def as_store_vfg_node(self) -> "StoreVFGNode": ...
    def as_copy_vfg_node(self) -> "CopyVFGNode": ...
    def as_gep_vfg_node(self) -> "GepVFGNode": ...
    def as_addr_vfg_node(self) -> "AddrVFGNode": ...

class LoadVFGNode(StmtVFGNode):
    """Load VFG node"""
    def get_def_svf_vars(self) -> List[SVFVar]: ...
    def to_string(self) -> str: ...

class StoreVFGNode(StmtVFGNode):
    """Store VFG node"""
    def get_def_svf_vars(self) -> List[SVFVar]: ...
    def to_string(self) -> str: ...

class CopyVFGNode(StmtVFGNode):
    """Copy VFG node"""
    def get_def_svf_vars(self) -> List[SVFVar]: ...
    def to_string(self) -> str: ...

class GepVFGNode(StmtVFGNode):
    """Gep VFG node"""
    def get_def_svf_vars(self) -> List[SVFVar]: ...
    def to_string(self) -> str: ...

class AddrVFGNode(StmtVFGNode):
    """Address VFG node"""
    def get_def_svf_vars(self) -> List[SVFVar]: ...
    def to_string(self) -> str: ...

class PHIVFGNode(VFGNode):
    """PHI VFG node"""
    def get_def_svf_vars(self) -> List[SVFVar]: ...
    def get_value(self) -> SVFVar: ...
    def to_string(self) -> str: ...
    def is_intra_phi_vfg_node(self) -> bool: ...
    def is_inter_phi_vfg_node(self) -> bool: ...
    def as_intra_phi_vfg_node(self) -> "IntraPHIVFGNode": ...
    def as_inter_phi_vfg_node(self) -> "InterPHIVFGNode": ...

class IntraPHIVFGNode(PHIVFGNode):
    """Intra-procedural PHI VFG node"""
    def to_string(self) -> str: ...

class InterPHIVFGNode(PHIVFGNode):
    """Inter-procedural PHI VFG node"""
    def to_string(self) -> str: ...

class ArgumentVFGNode(VFGNode):
    """Argument VFG node"""
    def get_value(self) -> SVFVar: ...
    def to_string(self) -> str: ...
    def is_actual_parm_vfg_node(self) -> bool: ...
    def is_formal_parm_vfg_node(self) -> bool: ...
    def is_actual_ret_vfg_node(self) -> bool: ...
    def is_formal_ret_vfg_node(self) -> bool: ...
    def as_actual_parm_vfg_node(self) -> "ActualParmVFGNode": ...
    def as_formal_parm_vfg_node(self) -> "FormalParmVFGNode": ...
    def as_actual_ret_vfg_node(self) -> "ActualRetVFGNode": ...
    def as_formal_ret_vfg_node(self) -> "FormalRetVFGNode": ...

class ActualParmVFGNode(ArgumentVFGNode):
    """Actual parameter VFG node"""
    def get_def_svf_vars(self) -> List[SVFVar]: ...
    def to_string(self) -> str: ...

class FormalParmVFGNode(ArgumentVFGNode):
    """Formal parameter VFG node"""
    def get_def_svf_vars(self) -> List[SVFVar]: ...
    def to_string(self) -> str: ...

class ActualRetVFGNode(ArgumentVFGNode):
    """Actual return VFG node"""
    def get_def_svf_vars(self) -> List[SVFVar]: ...
    def to_string(self) -> str: ...

class FormalRetVFGNode(ArgumentVFGNode):
    """Formal return VFG node"""
    def get_def_svf_vars(self) -> List[SVFVar]: ...
    def to_string(self) -> str: ...

class CmpVFGNode(VFGNode):
    """Compare VFG node"""
    def get_def_svf_vars(self) -> List[SVFVar]: ...
    def get_value(self) -> SVFVar: ...
    def to_string(self) -> str: ...

class BinaryOPVFGNode(VFGNode):
    """Binary operation VFG node"""
    def get_def_svf_vars(self) -> List[SVFVar]: ...
    def get_value(self) -> SVFVar: ...
    def to_string(self) -> str: ...

class UnaryOPVFGNode(VFGNode):
    """Unary operation VFG node"""
    def get_def_svf_vars(self) -> List[SVFVar]: ...
    def to_string(self) -> str: ...

class BranchVFGNode(VFGNode):
    """Branch VFG node"""
    def get_def_svf_vars(self) -> List[SVFVar]: ...
    def to_string(self) -> str: ...

# SVFG Node classes
class MRSVFGNode(VFGNode):
    """Memory region VFG node"""
    def get_points_to(self) -> Any: ...  # Could be more specific with proper type
    def get_def_svf_vars(self) -> List[SVFVar]: ...
    def to_string(self) -> str: ...
    def is_formal_in_svfg_node(self) -> bool: ...
    def is_formal_out_svfg_node(self) -> bool: ...
    def is_actual_in_svfg_node(self) -> bool: ...
    def is_actual_out_svfg_node(self) -> bool: ...
    def is_mssaphi_svfg_node(self) -> bool: ...
    def as_formal_in_svfg_node(self) -> "FormalINSVFGNode": ...
    def as_formal_out_svfg_node(self) -> "FormalOUTSVFGNode": ...
    def as_actual_in_svfg_node(self) -> "ActualINSVFGNode": ...
    def as_actual_out_svfg_node(self) -> "ActualOUTSVFGNode": ...
    def as_mssaphi_svfg_node(self) -> "MSSAPHISVFGNode": ...

class FormalINSVFGNode(MRSVFGNode):
    """Formal-in SVFG node (entry chi)"""
    def get_mr_ver(self) -> Any: ...  # Could be more specific if we know the type
    def get_fun_entry_node(self) -> FunEntryICFGNode: ...
    def to_string(self) -> str: ...

class FormalOUTSVFGNode(MRSVFGNode):
    """Formal-out SVFG node (return mu)"""
    def get_mr_ver(self) -> Any: ...
    def get_fun_exit_node(self) -> FunExitICFGNode: ...
    def to_string(self) -> str: ...

class ActualINSVFGNode(MRSVFGNode):
    """Actual-in SVFG node (callsite mu)"""
    def get_mr_ver(self) -> Any: ...
    def get_callsite(self) -> CallICFGNode: ...
    def to_string(self) -> str: ...

class ActualOUTSVFGNode(MRSVFGNode):
    """Actual-out SVFG node (callsite chi)"""
    def get_mr_ver(self) -> Any: ...
    def get_callsite(self) -> CallICFGNode: ...
    def to_string(self) -> str: ...

class MSSAPHISVFGNode(MRSVFGNode):
    """Memory SSA PHI SVFG node"""
    def to_string(self) -> str: ...
    def is_intra_mssaphi_svfg_node(self) -> bool: ...
    def is_inter_mssaphi_svfg_node(self) -> bool: ...
    def as_intra_mssaphi_svfg_node(self) -> "IntraMSSAPHISVFGNode": ...
    def as_inter_mssaphi_svfg_node(self) -> "InterMSSAPHISVFGNode": ...

class IntraMSSAPHISVFGNode(MSSAPHISVFGNode):
    """Intra-procedural Memory SSA PHI SVFG node"""
    def to_string(self) -> str: ...

class InterMSSAPHISVFGNode(MSSAPHISVFGNode):
    """Inter-procedural Memory SSA PHI SVFG node"""
    def get_fun(self) -> SVFFunction: ...
    def to_string(self) -> str: ...

class DummyVersionPropSVFGNode(VFGNode):
    """Dummy version propagation SVFG node"""
    def get_def_svf_vars(self) -> List[SVFVar]: ...
    def get_object(self) -> int: ...
    def get_version(self) -> int: ...

# Graph classes
class VFG:
    """Value Flow Graph"""
    def get_nodes(self) -> List[VFGNode]: ...
    def get_gnode(self, id: int) -> VFGNode: ...
    def dump(self) -> None: ...
    def view(self) -> None: ...
    def get_node_num(self) -> int: ...
    def get_edge_num(self) -> int: ...

class SVFG(VFG):
    """Sparse Value Flow Graph"""
    def get_def_svfg_node(self, val: SVFVar) -> List[VFGNode]: ...
    def get_actual_out_svfg_nodes(self, cs: CallICFGNode) -> List[ActualOUTSVFGNode]: ...
    def get_actual_in_svfg_nodes(self, cs: CallICFGNode) -> List[ActualINSVFGNode]: ...
    def get_formal_out_svfg_nodes(self, fun: FunObjVar) -> List[FormalOUTSVFGNode]: ...
    def get_formal_in_svfg_nodes(self, fun: FunObjVar) -> List[FormalINSVFGNode]: ...
    def dump(self) -> None: ...
    def view(self) -> None: ...
    def has_actual_out_svfg_nodes(self, cs: CallICFGNode) -> bool: ...
    def has_actual_in_svfg_nodes(self, cs: CallICFGNode) -> bool: ...
    def has_formal_out_svfg_nodes(self, fun: FunObjVar) -> bool: ...
    def has_formal_in_svfg_nodes(self, fun: FunObjVar) -> bool: ...


from typing import List, Set

class BoundedInt:
    def __init__(self, val: int, isInf: bool = False) -> None: ...
    def get_numeral(self) -> int: ...
    @property
    def is_infinity(self) -> bool: ...
    @property
    def is_plus_infinity(self) -> bool: ...
    @property
    def is_minus_infinity(self) -> bool: ...
    @property
    def is_zero(self) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __add__(self, other: 'BoundedInt') -> 'BoundedInt': ...
    def __sub__(self, other: 'BoundedInt') -> 'BoundedInt': ...
    def __mul__(self, other: 'BoundedInt') -> 'BoundedInt': ...
    def __truediv__(self, other: 'BoundedInt') -> 'BoundedInt': ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __lt__(self, other: 'BoundedInt') -> bool: ...
    def __le__(self, other: 'BoundedInt') -> bool: ...
    def __gt__(self, other: 'BoundedInt') -> bool: ...
    def __ge__(self, other: 'BoundedInt') -> bool: ...
    def __neg__(self) -> 'BoundedInt': ...
    @staticmethod
    def minus_infinity() -> int: ...
    @staticmethod
    def plus_infinity() -> int: ...


class IntervalValue:
    @overload
    def __init__(self, lb: int, ub: int) -> None: ...
    @overload
    def __init__(self, val: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __add__(self, other: 'IntervalValue') -> 'IntervalValue': ...
    def __sub__(self, other: 'IntervalValue') -> 'IntervalValue': ...
    def __mul__(self, other: 'IntervalValue') -> 'IntervalValue': ...
    def __truediv__(self, other: 'IntervalValue') -> 'IntervalValue': ...
    def __mod__(self, other: 'IntervalValue') -> 'IntervalValue': ...
    def __lt__(self, other: 'IntervalValue') -> bool: ...
    def __le__(self, other: 'IntervalValue') -> bool: ...
    def __gt__(self, other: 'IntervalValue') -> bool: ...
    def __ge__(self, other: 'IntervalValue') -> bool: ...
    def __and__(self, other: "IntervalValue") -> "IntervalValue": ...
    def __or__(self, other: "IntervalValue") -> "IntervalValue": ...
    def __xor__(self, other: "IntervalValue") -> "IntervalValue": ...
    def __lshift__(self, bits: int) -> "IntervalValue": ...
    def __rshift__(self, bits: int) -> "IntervalValue": ...
    def equals(self, other: "IntervalValue") -> "IntervalValue": ...
    def lb(self) -> int: ...
    def ub(self) -> int: ...
    def join_with(self, other: 'IntervalValue') -> None: ...
    def meet_with(self, other: 'IntervalValue') -> None: ...
    def widen_with(self, other: 'IntervalValue') -> None: ...
    def narrow_with(self, other: 'IntervalValue') -> None: ...
    def is_bottom(self) -> bool: ...
    def is_top(self) -> bool: ...
    def is_numeral(self) -> bool: ...
    def is_zero(self) -> bool: ...
    def is_real(self) -> bool: ...
    def is_int(self) -> bool: ...
    def get_numeral(self) -> float: ...
    def get_int_numeral(self) -> int: ...
    def get_real_numeral(self) -> float: ...
    def contained_within(self, other: 'IntervalValue') -> bool: ...
    def contain(self, other: 'IntervalValue') -> bool: ...
    def leq(self, other: 'IntervalValue') -> bool: ...
    def geq(self, other: 'IntervalValue') -> bool: ...
    def set_to_bottom(self) -> None: ...
    def set_to_top(self) -> None: ...
    def to_string(self) -> str: ...
    def eq_interval(self, other: 'IntervalValue') -> 'IntervalValue': ...
    def ne_interval(self, other: 'IntervalValue') -> 'IntervalValue': ...
    @staticmethod
    def top() -> 'IntervalValue': ...
    @staticmethod
    def bottom() -> 'IntervalValue': ...
    def __repr__(self) -> str: ...


class AddressValue:
    @overload
    def __init__(self, val: int) -> None: ...
    @overload
    def __init__(self, vals: Set[int]) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def insert(self, addr: int) -> bool: ...
    def contains(self, addr: int) -> bool: ...
    def empty(self) -> bool: ...
    def size(self) -> int: ...
    def is_top(self) -> bool: ...
    def is_bottom(self) -> bool: ...
    def set_top(self) -> None: ...
    def set_bottom(self) -> None: ...
    def join_with(self, other: 'AddressValue') -> bool: ...
    def meet_with(self, other: 'AddressValue') -> bool: ...
    def has_intersect(self, other: 'AddressValue') -> bool: ...
    def get_vals(self) -> Set[int]: ...
    def set_vals(self, vals: Set[int]) -> None: ...
    def __contains__(self, addr: int) -> bool: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...
    @staticmethod
    def get_virtual_mem_address(idx: int) -> int: ...
    @staticmethod
    def is_virtual_mem_address(val: int) -> bool: ...
    @staticmethod
    def get_internal_id(val: int) -> int: ...


class AbstractValue:
    @overload
    def __init__(self, val: int) -> None: ...
    @overload
    def __init__(self, vals: Set[int]) -> None: ...
    def is_interval(self) -> bool: ...
    def is_addr(self) -> bool: ...
    def get_interval(self) -> IntervalValue: ...
    def get_addrs(self) -> AddressValue: ...
    def equals(self, other: 'AbstractValue') -> bool: ...
    def join_with(self, other: 'AbstractValue') -> None: ...
    def meet_with(self, other: 'AbstractValue') -> None: ...
    def widen_with(self, other: 'AbstractValue') -> None: ...
    def narrow_with(self, other: 'AbstractValue') -> None: ...
    def ref_addrs(self) -> list: ...
    def ref_interval(self) -> "IntervalValue": ...
    def __eq__(self, other: object) -> bool: ...
    def __str__(self) -> str: ...


class AbstractState:
    def __init__(self) -> None: ...
    def get_var(self, var_id: int) -> AbstractValue: ...
    def set_var(self, var_id: int, val: AbstractValue) -> None: ...
    def __getitem__(self, var_id: int) -> AbstractValue: ...
    def __setitem__(self, var_id: int, val: AbstractValue) -> None: ...
    def store(self, addr: int, val: AbstractValue) -> None: ...
    def load(self, addr: int) -> AbstractValue: ...
    def equals(self, other: 'AbstractState') -> bool: ...
    def join_with(self, other: 'AbstractState') -> None: ...
    def meet_with(self, other: 'AbstractState') -> None: ...
    def widening(self, other: 'AbstractState') -> 'AbstractState': ...
    def narrowing(self, other: 'AbstractState') -> 'AbstractState': ...
    def is_virtual_mem_address(self, val: int) -> bool: ...
    def get_virtual_mem_address(self, idx: int) -> int: ...
    def is_null_ptr(self, addr: int) -> bool: ...
    def clear(self) -> None: ...
    def print(self) -> None: ...
    def clone(self) -> 'AbstractState': ...
    def get_addr_to_vals(self) -> dict: ...
    def get_var_to_vals(self) -> dict: ...
    def print_abs_state(self) -> None: ...
    def __str__(self) -> str: ...
from typing import Optional, Set
class AndersenBase:
    def __init__(self, svfir: 'SVFIR') -> None: ...
    def initialize(self) -> None: ...
    def init_worklist(self) -> None: ...
    def update_call_graph(self) -> None: ...
    def push_into_worklist(self, node: int) -> None: ...
    def finalize(self) -> None: ...
    def add_pts(self, id: int, ptd: int) -> bool: ...
    def get_constraint_graph(self) -> 'ConstraintGraph': ...
    def union_pts(self, id: int, ptd: int) -> bool: ...
    def union_pts_2(self, id: int, ptd: 'PointsTo') -> bool: ...
    def alias(self, id1: int, id2: int) -> 'AliasResult': ...
    def is_worklist_empty(self) -> bool: ...
    def pop_from_worklist(self) -> int: ...
    def get_pts(self, id: int) -> 'PointsTo': ...


class AliasResult:
    NoAlias: int
    MayAlias: int
    MustAlias: int
    PartialAlias: int

class WPAPass:
    def __init__(self) -> None: ...
    def run_on_module(self, svf_module: 'SVFIR') -> None: ...
    def get_pts(self, id: int) -> 'PointsTo': ...
    def get_mod_ref_info(self, callInst: 'CallICFGNode') -> 'ModRefInfo': ...
    def print_alias_pairs(self, pta: 'PointerAnalysis') -> None: ...
    def get_pass_name(self) -> str: ...


class AliasCheckRule:
    Conservative: int
    Veto: int
    Precise: int

from typing import List, Tuple, Optional
